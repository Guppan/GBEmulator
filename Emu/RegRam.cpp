#include "RegRam.h"


RegRam::RegRam() :
	Ram{ 0xFE00, 0x0200 }
{
	reset_device();
}


void RegRam::reset_device() {
	for (u16 i{}; i < 0x200; ++i) {
		ram[i] = 0x00;
	}

	// Reset registers.
	ram[0x105] = 0x00; ram[0x106] = 0x00; ram[0x107] = 0x00; ram[0x110] = 0x80;
	ram[0x111] = 0xBF; ram[0x112] = 0xF3; ram[0x114] = 0xBF; ram[0x116] = 0x3F;
	ram[0x117] = 0x00; ram[0x119] = 0xBF; ram[0x11A] = 0x7F; ram[0x11B] = 0xFF;
	ram[0x11C] = 0x9F; ram[0x11E] = 0xBF; ram[0x120] = 0xFF; ram[0x121] = 0x00;
	ram[0x122] = 0x00; ram[0x123] = 0xBF; ram[0x124] = 0x77; ram[0x125] = 0xF3;
	ram[0x126] = 0xF1; ram[0x140] = 0x91; ram[0x142] = 0x00; ram[0x143] = 0x00;
	ram[0x145] = 0x00; ram[0x147] = 0xFC; ram[0x148] = 0xFF; ram[0x149] = 0xFF;
	ram[0x14A] = 0x00; ram[0x14B] = 0x00; ram[0x1FF] = 0x00;
}


u8 RegRam::read_byte(const u16 address) const {
	const u16 adjusted_address = address - address_offset;
	return ram[adjusted_address];
}


void RegRam::write_byte(const u16 address, const u8 data) {
	const u16 adjusted_address = address - address_offset;
	ram[adjusted_address] = data;
}